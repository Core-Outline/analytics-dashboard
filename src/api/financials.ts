export async function fetchRecurringRevenue(timeUnits: string, company: string) {
  const response = await fetch(`https://data.coreoutline.com/recurring-revenue?time_units=${timeUnits}&company=${company}`);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
}



export async function fetchRevenueGrowthRate(timeUnits: string, company: string) {
  try {
    const response = await fetch(`https://data.coreoutline.com/revenue-growth-rate?time_units=${timeUnits}&company=${company}`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return await response.json();
  } catch (error) {
    // Fallback sample data
    return {
      date: [
        "2020-01-31T00:00:00", "2020-02-29T00:00:00", "2020-03-31T00:00:00", "2020-04-30T00:00:00", "2020-05-31T00:00:00", "2020-06-30T00:00:00", "2020-07-31T00:00:00", "2020-08-31T00:00:00", "2020-09-30T00:00:00", "2020-10-31T00:00:00", "2020-11-30T00:00:00", "2020-12-31T00:00:00", "2021-01-31T00:00:00", "2021-02-28T00:00:00", "2021-03-31T00:00:00", "2021-04-30T00:00:00", "2021-05-31T00:00:00", "2021-06-30T00:00:00", "2021-07-31T00:00:00", "2021-08-31T00:00:00", "2021-09-30T00:00:00", "2021-10-31T00:00:00", "2021-11-30T00:00:00", "2021-12-31T00:00:00", "2022-01-31T00:00:00", "2022-02-28T00:00:00", "2022-03-31T00:00:00", "2022-04-30T00:00:00", "2022-05-31T00:00:00", "2022-06-30T00:00:00", "2022-07-31T00:00:00", "2022-08-31T00:00:00", "2022-09-30T00:00:00", "2022-10-31T00:00:00", "2022-11-30T00:00:00", "2022-12-31T00:00:00", "2023-01-31T00:00:00", "2023-02-28T00:00:00", "2023-03-31T00:00:00", "2023-04-30T00:00:00", "2023-05-31T00:00:00", "2023-06-30T00:00:00", "2023-07-31T00:00:00", "2023-08-31T00:00:00", "2023-09-30T00:00:00", "2023-10-31T00:00:00", "2023-11-30T00:00:00", "2023-12-31T00:00:00", "2024-01-31T00:00:00", "2024-02-29T00:00:00", "2024-03-31T00:00:00"
      ],
      amount: [
        100.0, -1390683.0, 1375617.0, -239059.0, -488135.0, 53501.0, -239159.0, 680258.0, 100834.0, 328180.0, -821937.0, -343512.0, 171361.0, -1253371.0, 1765321.0, -1037474.0, 354616.0, -427584.0, 993138.0, 180498.0, -915933.0, 1059118.0, -2032958.0, 2695056.0, -2000377.0, -227159.0, 943927.0, -429542.0, 757015.0, -932831.0, 1704947.0, -1034562.0, -1651209.0, 2071920.0, -1420930.0, 1975116.0, -114642.0, -2066057.0, 940131.0, 915395.0, 769925.0, -1511088.0, 243527.0, -90452.0, -596026.0, 967064.0, -238780.0, 973051.0, -1342148.0, 15013.0, 539821.0
      ],
      growth: [
        0.0, -13907.83, -1.9891664743151387, -1.1737831096882345, 1.0419017899347023, -1.1096028762534955, -5.470178127511636, -3.8443754991449204, -0.8517709457294145, 2.2546561675625285, -3.5045310500335183, -0.5820701586617952, -1.4988501129509304, -8.31421385262691, -2.4084584692002604, -1.5876970817205482, -1.3418071199856576, -2.2057662372820177, -3.3226734396048494, -0.818254864882826, -6.074477279526643, -2.156326936577239, -2.9194820596005355, -2.325682084922561, -1.742239493353756, -0.8864419057007754, -5.155358141213863, -1.455058494989549, -2.7623771365780296, -2.2322490307325484, -2.82771262961887, -1.606800094079171, 0.5960464428424783, -2.254789672294664, -1.6858035059268697, -2.390016397711358, -1.0580431731604625, 17.02181573943232, -1.4550363324922788, -0.026311226839663804, -0.1589150039054179, -2.962643114589083, -1.161160038329998, -1.3714249344015244, 5.58941759165082, -2.6225198229607436, -1.2469123036324379, -5.075094228997403, -2.379319275145907, -1.011185800671759, 34.95690401651902
      ]
    };
  }
}
